JustDo

随笔- 348  文章- 6  评论- 70 
博客园  首页  新随笔  新文章  联系  管理  订阅 订阅
spring @Transactional注解参数详解
事物注解方式: @Transactional

当标于类前时, 标示类中所有方法都进行事物处理 , 例子:

1 @Transactional public class TestServiceBean implements TestService {}
当类中某些方法不需要事物时:

复制代码
 1 @Transactional  
 2 public class TestServiceBean implements TestService { 
 3     private TestDao dao; 
 4     public void setDao(TestDao dao) { 
 5         this.dao = dao; 
 6     } 
 7     @Transactional(propagation =Propagation.NOT_SUPPORTED)
 8     public List getAll() { 
 9         return null; 
10     } 
11 }
复制代码
 

事物传播行为介绍: 

　　@Transactional(propagation=Propagation.REQUIRED) ：如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)
　　@Transactional(propagation=Propagation.NOT_SUPPORTED) ：容器不为这个方法开启事务
　　@Transactional(propagation=Propagation.REQUIRES_NEW) ：不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务
　　@Transactional(propagation=Propagation.MANDATORY) ：必须在一个已有的事务中执行,否则抛出异常
　　@Transactional(propagation=Propagation.NEVER) ：必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)
　　@Transactional(propagation=Propagation.SUPPORTS) ：如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务.

 

事物超时设置:

　　@Transactional(timeout=30) //默认是30秒

 

事务隔离级别:

　　@Transactional(isolation = Isolation.READ_UNCOMMITTED)：读取未提交数据(会出现脏读, 不可重复读) 基本不使用
　　@Transactional(isolation = Isolation.READ_COMMITTED)：读取已提交数据(会出现不可重复读和幻读)
　　@Transactional(isolation = Isolation.REPEATABLE_READ)：可重复读(会出现幻读)
　　@Transactional(isolation = Isolation.SERIALIZABLE)：串行化

　　MYSQL: 默认为REPEATABLE_READ级别
　　SQLSERVER: 默认为READ_COMMITTED

脏读 : 一个事务读取到另一事务未提交的更新数据
不可重复读 : 在同一事务中, 多次读取同一数据返回的结果有所不同, 换句话说, 
后续读取可以读到另一事务已提交的更新数据. 相反, "可重复读"在同一事务中多次
读取数据时, 能够保证所读数据一样, 也就是后续读取不能读到另一事务已提交的更新数据
幻读 : 一个事务读到另一个事务已提交的insert数据

 

@Transactional注解中常用参数说明

参数名称

功能描述

readOnly

该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。例如：@Transactional(readOnly=true)

rollbackFor

该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：

指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)

指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, Exception.class})

rollbackForClassName

该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：

指定单一异常类名称：@Transactional(rollbackForClassName="RuntimeException")

指定多个异常类名称：@Transactional(rollbackForClassName={"RuntimeException","Exception"})

noRollbackFor

该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：

指定单一异常类：@Transactional(noRollbackFor=RuntimeException.class)

指定多个异常类：@Transactional(noRollbackFor={RuntimeException.class, Exception.class})

noRollbackForClassName

该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：

指定单一异常类名称：@Transactional(noRollbackForClassName="RuntimeException")

指定多个异常类名称：

@Transactional(noRollbackForClassName={"RuntimeException","Exception"})

propagation

该属性用于设置事务的传播行为，具体取值可参考表6-7。

例如：@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)

isolation

该属性用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置

timeout

该属性用于设置事务的超时秒数，默认值为-1表示永不超时

 
 

注意的几点:


　　1、@Transactional 只能被应用到public方法上, 对于其它非public的方法,如果标记了@Transactional也不会报错,但方法没有事务功能.

　　2、用 spring 事务管理器,由spring来负责数据库的打开,提交,回滚.默认遇到运行期例外(throw new RuntimeException("注释");)会回滚，即遇到不受检查（unchecked）的例外时回滚；而遇到需要捕获的例外(throw new Exception("注释");)不会回滚,即遇到受检查的例外（就是非运行时抛出的异常，编译器会检查到的异常叫受检查例外或说受检查异常）时，需我们指定方式来让事务回滚要想所有异常都回滚,要加上 @Transactional( rollbackFor={Exception.class,其它异常}) .如果让unchecked例外不回滚： @Transactional(notRollbackFor=RunTimeException.class)
如下:

复制代码
1 @Transactional(rollbackFor=Exception.class) //指定回滚,遇到异常Exception时回滚
2 public void methodName() {
3 　　　throw new Exception("注释");
4 }
5 @Transactional(noRollbackFor=Exception.class)//指定不回滚,遇到运行期例外(throw new RuntimeException("注释");)会回滚
6 public ItimDaoImpl getItemDaoImpl() {
7 　　　throw new RuntimeException("注释");
8 }
复制代码
　　3、@Transactional 注解应该只被应用到 public 可见度的方法上。 如果你在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错， 但是这个被注解的方法将不会展示已配置的事务设置。


　　4、@Transactional 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。然而，请注意仅仅 @Transactional 注解的出现不足于开启事务行为，它仅仅 是一种元数据，能够被可以识别 @Transactional 注解和上述的配置适当的具有事务行为的beans所使用。上面的例子中，其实正是 元素的出现 开启 了事务行为。


　　5、Spring团队的建议是你在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。你当然可以在接口上使用 @Transactional 注解，但是这将只能当你设置了基于接口的代理时它才生效。因为注解是不能继承的，这就意味着如果你正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装（将被确认为严重的）。因此，请接受Spring团队的建议并且在具体的类上使用 @Transactional 注解。

分类: Spring
好文要顶 关注我 收藏该文    
Just_Do
关注 - 4
粉丝 - 195
+加关注
17 0
« 上一篇：Spring 事务传播行为
» 下一篇：Spring 基于xml配置方式的事务
 posted on 2016-07-01 14:31 Just_Do 阅读(72374) 评论(7) 编辑 收藏

评论
#1楼    
 每天进步一丶   | 2017-03-28 09:24
非常棒，受教了，谢谢
支持(0)反对(0)
#2楼    
 双月当空照   | 2017-11-29 19:15
非常棒！！
支持(0)反对(0)
#3楼    
 Johnbarrowman65   | 2018-01-18 15:53
棒棒的
支持(0)反对(0)
#4楼    
 紫薇郎   | 2018-03-06 10:38
@Transactional(noRollbackFor=Exception.class)//指定不回滚,遇到运行期例外(throw new RuntimeException("注释");)会回滚

写错了吧，应该是 遇到运行期例外(throw new RuntimeException("注释");)不会回滚吧
支持(0)反对(0)
#5楼    
 慵懒的肥鱼   | 2018-05-04 14:40
谢谢啦
支持(0)反对(0)
#6楼    
 周永发   | 2018-06-29 16:27
反正我是看不懂
支持(0)反对(0)
#7楼    
 哎，没辙   | 2018-07-13 15:41
谢谢
支持(0)反对(0)
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
【推荐】超50万C++/C#源码: 大型实时仿真组态图形源码
【推荐】Java工作两年，一天竟收到33份面试通知
【推荐】程序员问答平台，解决您开发中遇到的技术难题

相关博文：
· spring@Transactional注解参数详解
· spring@Transactional注解参数详解
· spring @Transactional注解参数详解
· spring@Transactional注解参数详解
· spring @Transactional注解参数详解

最新新闻：
· “双小行星”1999 KW4有什么奇特之处？
· 日本宣布将限制外资持有本国科技公司股权
· WHO 将游戏成瘾归类为疾病
· 《纽约时报》揭秘 Facebook 内容清理工作：“累死 AI”都完不成的任务
· 地球史上最大的一次灭绝
» 更多新闻...
公告
昵称：Just_Do
园龄：4年9个月
粉丝：195
关注：4
+加关注
<	2019年5月	>
日	一	二	三	四	五	六
28	29	30	1	2	3	4
5	6	7	8	9	10	11
12	13	14	15	16	17	18
19	20	21	22	23	24	25
26	27	28	29	30	31	1
2	3	4	5	6	7	8
搜索
 
 
常用链接
我的随笔
我的评论
我的参与
最新评论
我的标签
随笔分类
Android(3)
ASP.NET(4)
ASP.NET MVC(22)
ASP.NET WebApi(9)
autofac(3)
Azure
C#(30)
C# 基础知识(1)
CSS(4)
C语言(5)
DevExpress(1)
dos.orm(1)
Dotnetbar(1)
Echarts(2)
Entity Framework(19)
hibernate(19)
HTML+CSS(4)
IBatis.Net(10)
IIS配置(3)
Java(43)
Javascript(16)
JavaWeb(17)
Java资料(3)
JQuery和Ajax(6)
JSON.NET(1)
jsp基础(2)
JS插件(2)
Mybatis(16)
MySql(4)
NPOI(3)
Oracle(1)
Redis(1)
select2(1)
Spring(26)
springmvc(21)
Sql Server(6)
Sqlite(2)
struts2(13)
SuperSocket(4)
svg(2)
VS插件(2)
WebService(1)
安卓开发(4)
工具介绍
收藏网址(1)
手工制作(2)
微信开发(2)
系统(2)
下载(3)
随笔档案
2017年7月 (1)
2017年6月 (2)
2017年5月 (12)
2017年3月 (5)
2017年2月 (17)
2017年1月 (1)
2016年12月 (14)
2016年11月 (4)
2016年10月 (4)
2016年9月 (7)
2016年8月 (35)
2016年7月 (54)
2016年6月 (91)
2016年5月 (11)
2016年4月 (2)
2016年3月 (1)
2016年2月 (1)
2016年1月 (2)
2015年12月 (9)
2015年11月 (3)
2015年10月 (1)
2015年9月 (8)
2015年8月 (4)
2015年7月 (6)
2015年6月 (17)
2015年5月 (2)
2015年4月 (2)
2015年3月 (24)
2015年2月 (1)
2015年1月 (5)
2014年12月 (1)
2014年11月 (1)
java学习网站
svg
超级强大的SVG SMIL animation动画详解
最新评论
1. Re:Spring JdbcTemplate详解
顶，写的很清楚，成功应用，感谢
--冻干柠檬
2. Re:Spring JdbcTemplate详解
顶
--雨天也是好天气
3. Re:Spring 注解配置（2）——@Autowired
@Taobean_Chu1、是来自“@Repository("userRepository")”。2、因为这个注解@Repository，它的实例名默认是类名首字母小写...
--矛盾的小温
4. Re:ASP.NET MVC 基于角色的权限控制系统的示例教程
这个帖子还有人关注吗？那个RoleApi应该是什么样的，有大佬出来说一下嘛？
--MissSage
5. Re:Spring 注解配置（2）——@Autowired
感谢博主，解决了我一个很大的问题！
--Taobean_Chu
阅读排行榜
1. Spring 注解配置（2）——@Autowired(172114)
2. Spring MVC 向前台页面传值-ModelAndView(101577)
3. Mybatis <where>标签(82074)
4. Spring JdbcTemplate详解(78980)
5. spring @Transactional注解参数详解(72372)
评论排行榜
1. Spring 注解配置（2）——@Autowired(12)
2. spring @Transactional注解参数详解(7)
3. Spring MVC @SessionAttributes注解(5)
4. ASP.NET MVC 基于角色的权限控制系统的示例教程(5)
5. 通过配置的方式Autofac 《第三篇》(5)
推荐排行榜
1. Spring 注解配置（2）——@Autowired(23)
2. spring @Transactional注解参数详解(17)
3. Spring JdbcTemplate详解(12)
4. SuperGridControl 使用小技巧(7)
5. EL表达式(6)